package com.bit.tcp;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;





class chatting implements Runnable{
   ServerSocket serverSocket;
   Socket clientSocket;
   private InputStream inputStream;
   private OutputStream outputStream;
   private InputStreamReader inputStreamReader;
   private OutputStreamWriter outputStreamWriter;
   private BufferedReader bufReader;
   private BufferedWriter bufWriter;
   private DataInputStream dataInputStream;
   private DataOutputStream dataOutputStream;
   static List<OutputStream> list = new ArrayList<OutputStream>();
   chatting(Socket clientSocket){
      this.clientSocket=clientSocket;
   }
   @Override
   public void run() {
      socketInput(clientSocket);
   }
   public void socketInput(Socket clientSocket){
      try {
         inputStream = clientSocket.getInputStream();
         dataInputStream = new DataInputStream(inputStream);
         InetAddress inetAddress = clientSocket.getInetAddress();
         System.out.println(inetAddress.getHostAddress()+"접속");
         
         
         outputStream = clientSocket.getOutputStream();
         list.add(outputStream);
         
         while(true){
            
            String msg = dataInputStream.readUTF();
            if(msg.isEmpty())break;
            for(int i=0;i<list.size();i++){
               OutputStream out = list.get(i);
               dataOutputStream = new DataOutputStream(outputStream);
               dataOutputStream.writeUTF(inetAddress.getHostAddress()+">>"+msg);
               dataOutputStream.flush();
               
            }
         }
         System.out.println(inetAddress.getHostAddress());
      } catch (IOException e) {
         e.printStackTrace();
      }
      
   }////accept하는 thread 생성 , 클래스 객체 생성시 생성자로 ServerSocket을 받아옴
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
class AcceptThread implements Runnable{
   ServerSocket serverSocket;
   Socket clientSocket;
   private InputStream inputStream;
   private OutputStream outputStream;
   private InputStreamReader inputStreamReader;
   private OutputStreamWriter outputStreamWriter;
   private BufferedReader bufReader;
   private BufferedWriter bufWriter;
   static List<OutputStream> list = new ArrayList<OutputStream>();
   
   public AcceptThread(ServerSocket serverSocket){
      this.serverSocket = serverSocket;
   }
   
   @Override
   public void run() {
         try {
         clientSocket = serverSocket.accept();
         chatting chat = new chatting(clientSocket);
         new Thread(chat).start();
         
      } catch (IOException e) {
         e.printStackTrace();
      }
         
   }
   //받은 clientSocket을 InputStream으로 변환.

   
   
   void change(Socket socket){
      this.clientSocket = socket;
   }
}



///////////////////////////////////////////////////////////////////////////////////

public class UpDownServer {
   private Socket clientSocket;
   private InputStream inputStream;
   private OutputStream outputStream;
   private InputStreamReader inputStreamReader;
   private OutputStreamWriter outputStreamWriter;
   private BufferedReader bufReader;
   private BufferedWriter bufWriter;
   private DataInputStream dataInputStream;
   private DataOutputStream dataOutputStream;
   
   public void serverSetting(){
      try {
         
	         ServerSocket serverSocket = new ServerSocket(8080);//포트여는 서버소켓생성  
         while(true){
	         AcceptThread acceptThread = new AcceptThread(serverSocket);
	         new Thread(acceptThread).start();
         }
      } catch (IOException e) {
         e.printStackTrace();
      }
   }
   public void closeAll(){
      try {
         if(dataInputStream!=null)dataInputStream.close();
         if(dataOutputStream!=null)dataOutputStream.close();
         if(inputStream!=null)inputStream.close();
         if(outputStream!=null)outputStream.close();
      } catch (IOException e) {
      }
   }
   public void streamSetting(){
      try {
         inputStream = clientSocket.getInputStream();
         inputStreamReader = new InputStreamReader(inputStream);
         bufReader = new BufferedReader(inputStreamReader);
         outputStream = clientSocket.getOutputStream();
         outputStreamWriter = new OutputStreamWriter(outputStream);
         bufWriter = new BufferedWriter(outputStreamWriter);
      } catch (IOException e) {
         e.printStackTrace();
      }
   }//클라이언트로 부터 받은 Stream을 서버의 버퍼인풋스트림으로 바꾸는 과정.
   
   public void dataRecv(){
      
      
   }
   public void dataSend(){
      
   }
   
   public UpDownServer(){
      serverSetting();
   }
   public static void main(String[] args) {
      
      UpDownServer usd = new UpDownServer();
      
   }
}